
// Code generated by stanc v2.28.0
#include <stan/model/model_header.hpp>
namespace mesh2D_model_2_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 21> locations_array__ = 
{" (found before start of program)",
 " (in '/Users/tomoyauchiyama/code/STAN/mesh2D_model_2.stan', line 9, column 4 to column 19)",
 " (in '/Users/tomoyauchiyama/code/STAN/mesh2D_model_2.stan', line 10, column 4 to column 22)",
 " (in '/Users/tomoyauchiyama/code/STAN/mesh2D_model_2.stan', line 11, column 4 to column 19)",
 " (in '/Users/tomoyauchiyama/code/STAN/mesh2D_model_2.stan', line 12, column 4 to column 25)",
 " (in '/Users/tomoyauchiyama/code/STAN/mesh2D_model_2.stan', line 15, column 4 to line 18, column 6)",
 " (in '/Users/tomoyauchiyama/code/STAN/mesh2D_model_2.stan', line 19, column 4 to line 22, column 6)",
 " (in '/Users/tomoyauchiyama/code/STAN/mesh2D_model_2.stan', line 23, column 4 to column 35)",
 " (in '/Users/tomoyauchiyama/code/STAN/mesh2D_model_2.stan', line 24, column 4 to column 72)",
 " (in '/Users/tomoyauchiyama/code/STAN/mesh2D_model_2.stan', line 2, column 4 to column 10)",
 " (in '/Users/tomoyauchiyama/code/STAN/mesh2D_model_2.stan', line 3, column 4 to column 10)",
 " (in '/Users/tomoyauchiyama/code/STAN/mesh2D_model_2.stan', line 4, column 11 to column 12)",
 " (in '/Users/tomoyauchiyama/code/STAN/mesh2D_model_2.stan', line 4, column 14 to column 15)",
 " (in '/Users/tomoyauchiyama/code/STAN/mesh2D_model_2.stan', line 4, column 4 to column 19)",
 " (in '/Users/tomoyauchiyama/code/STAN/mesh2D_model_2.stan', line 5, column 4 to column 10)",
 " (in '/Users/tomoyauchiyama/code/STAN/mesh2D_model_2.stan', line 6, column 30 to column 31)",
 " (in '/Users/tomoyauchiyama/code/STAN/mesh2D_model_2.stan', line 6, column 33 to column 34)",
 " (in '/Users/tomoyauchiyama/code/STAN/mesh2D_model_2.stan', line 6, column 4 to column 36)",
 " (in '/Users/tomoyauchiyama/code/STAN/mesh2D_model_2.stan', line 9, column 11 to column 12)",
 " (in '/Users/tomoyauchiyama/code/STAN/mesh2D_model_2.stan', line 9, column 14 to column 15)",
 " (in '/Users/tomoyauchiyama/code/STAN/mesh2D_model_2.stan', line 11, column 11 to column 12)"};



class mesh2D_model_2_model final : public model_base_crtp<mesh2D_model_2_model> {

 private:
  int I;
  int J;
  Eigen::Matrix<double, -1, -1> Y__;
  int T;
  std::vector<std::vector<int>> TID; 
  Eigen::Map<Eigen::Matrix<double, -1, -1>> Y{nullptr, 0, 0};
 
 public:
  ~mesh2D_model_2_model() { }
  
  inline std::string model_name() const final { return "mesh2D_model_2_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.28.0", "stancflags = "};
  }
  
  
  mesh2D_model_2_model(stan::io::var_context& context__,
                       unsigned int random_seed__ = 0,
                       std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "mesh2D_model_2_model_namespace::mesh2D_model_2_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = 1;
      current_statement__ = 9;
      context__.validate_dims("data initialization","I","int",
           std::vector<size_t>{});
      I = std::numeric_limits<int>::min();
      
      current_statement__ = 9;
      I = context__.vals_i("I")[(1 - 1)];
      current_statement__ = 10;
      context__.validate_dims("data initialization","J","int",
           std::vector<size_t>{});
      J = std::numeric_limits<int>::min();
      
      current_statement__ = 10;
      J = context__.vals_i("J")[(1 - 1)];
      current_statement__ = 11;
      validate_non_negative_index("Y", "I", I);
      current_statement__ = 12;
      validate_non_negative_index("Y", "J", J);
      current_statement__ = 13;
      context__.validate_dims("data initialization","Y","double",
           std::vector<size_t>{static_cast<size_t>(I),
            static_cast<size_t>(J)});
      Y__ = Eigen::Matrix<double, -1, -1>(I, J);
      new (&Y) Eigen::Map<Eigen::Matrix<double, -1, -1>>(Y__.data(), I, J);
      
      {
        std::vector<local_scalar_t__> Y_flat__;
        current_statement__ = 13;
        Y_flat__ = context__.vals_r("Y");
        current_statement__ = 13;
        pos__ = 1;
        current_statement__ = 13;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 13;
          for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
            current_statement__ = 13;
            assign(Y, Y_flat__[(pos__ - 1)],
              "assigning variable Y", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 13;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 14;
      context__.validate_dims("data initialization","T","int",
           std::vector<size_t>{});
      T = std::numeric_limits<int>::min();
      
      current_statement__ = 14;
      T = context__.vals_i("T")[(1 - 1)];
      current_statement__ = 15;
      validate_non_negative_index("TID", "I", I);
      current_statement__ = 16;
      validate_non_negative_index("TID", "J", J);
      current_statement__ = 17;
      context__.validate_dims("data initialization","TID","int",
           std::vector<size_t>{static_cast<size_t>(I),
            static_cast<size_t>(J)});
      TID = std::vector<std::vector<int>>(I, std::vector<int>(J, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> TID_flat__;
        current_statement__ = 17;
        TID_flat__ = context__.vals_i("TID");
        current_statement__ = 17;
        pos__ = 1;
        current_statement__ = 17;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 17;
          for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
            current_statement__ = 17;
            assign(TID, TID_flat__[(pos__ - 1)],
              "assigning variable TID", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 17;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 17;
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        current_statement__ = 17;
        for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
          current_statement__ = 17;
          check_greater_or_equal(function__, "TID[sym1__, sym2__]",
                                 TID[(sym1__ - 1)][(sym2__ - 1)], 1);
        }
      }
      current_statement__ = 17;
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        current_statement__ = 17;
        for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
          current_statement__ = 17;
          check_less_or_equal(function__, "TID[sym1__, sym2__]",
                              TID[(sym1__ - 1)][(sym2__ - 1)], T);
        }
      }
      current_statement__ = 18;
      validate_non_negative_index("r", "I", I);
      current_statement__ = 19;
      validate_non_negative_index("r", "J", J);
      current_statement__ = 20;
      validate_non_negative_index("beta", "T", T);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = (I * J) + 1 + T + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "mesh2D_model_2_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, -1> r;
      current_statement__ = 1;
      r = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(I, J);
      local_scalar_t__ s_r;
      current_statement__ = 2;
      s_r = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta;
      current_statement__ = 3;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(T);
      local_scalar_t__ s_beta;
      current_statement__ = 4;
      s_beta = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      {
        current_statement__ = 5;
        lp_accum__.add(
          normal_lpdf<false>(
            to_vector(
              rvalue(r, "r", index_min_max(1, I), index_min_max(3, J))),
            to_vector(
              subtract(
                multiply(2,
                  rvalue(r, "r",
                    index_min_max(1, I), index_min_max(2, (J - 1)))),
                rvalue(r, "r",
                  index_min_max(1, I), index_min_max(1, (J - 2))))), s_r));
        current_statement__ = 6;
        lp_accum__.add(
          normal_lpdf<false>(
            to_vector(
              rvalue(r, "r", index_min_max(3, I), index_min_max(1, J))),
            to_vector(
              subtract(
                multiply(2,
                  rvalue(r, "r",
                    index_min_max(2, (I - 1)), index_min_max(1, J))),
                rvalue(r, "r",
                  index_min_max(1, (I - 2)), index_min_max(1, J)))), s_r));
        current_statement__ = 7;
        lp_accum__.add(student_t_lpdf<propto__>(beta, 6, 0, s_beta));
        current_statement__ = 8;
        lp_accum__.add(
          normal_lpdf<propto__>(to_vector(transpose(Y)),
            add(to_vector(transpose(r)),
              rvalue(beta, "beta", index_multi(to_array_1d(TID)))), 0.1));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "mesh2D_model_2_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, -1> r;
      current_statement__ = 1;
      r = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(I, J);
      double s_r;
      current_statement__ = 2;
      s_r = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      Eigen::Matrix<double, -1, 1> beta;
      current_statement__ = 3;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(T);
      double s_beta;
      current_statement__ = 4;
      s_beta = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      out__.write(r);
      out__.write(s_r);
      out__.write(beta);
      out__.write(s_beta);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__;
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__, -1, -1> r;
      r = Eigen::Matrix<local_scalar_t__, -1, -1>(I, J);
      stan::math::fill(r, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
          assign(r, in__.read<local_scalar_t__>(),
            "assigning variable r", index_uni(sym2__), index_uni(sym1__));
        }
      }
      out__.write(r);
      local_scalar_t__ s_r;
      s_r = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, s_r);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta;
      beta = Eigen::Matrix<local_scalar_t__, -1, 1>(T);
      stan::math::fill(beta, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        assign(beta, in__.read<local_scalar_t__>(),
          "assigning variable beta", index_uni(sym1__));
      }
      out__.write(beta);
      local_scalar_t__ s_beta;
      s_beta = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, s_beta);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"r", "s_r", "beta", "s_beta"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(I)
                                                                   ,
                                                                   static_cast<size_t>(J)
                                                                   },
      std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(T)},
      std::vector<size_t>{}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "r" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    param_names__.emplace_back(std::string() + "s_r");
    for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "s_beta");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "r" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    param_names__.emplace_back(std::string() + "s_r");
    for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "s_beta");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"r\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(I) + ",\"cols\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"s_r\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(T) + "},\"block\":\"parameters\"},{\"name\":\"s_beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"r\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(I) + ",\"cols\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"s_r\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(T) + "},\"block\":\"parameters\"},{\"name\":\"s_beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((I * J) + 1) + T) + 1);
      const size_t num_transformed = 0;
      const size_t num_gen_quantities = 0;
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((I * J) + 1) + T) + 1);
      const size_t num_transformed = 0;
      const size_t num_gen_quantities = 0;
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 4> names__{"r", "s_r", "beta",
   "s_beta"};  const std::array<Eigen::Index, 4> num_params__{(I * J), 
   1, T, 1};
    
     std::vector<double> params_r_flat__(num_params_r__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < num_params__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(params_r_flat__.size());
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = mesh2D_model_2_model_namespace::mesh2D_model_2_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return mesh2D_model_2_model_namespace::profiles__;
}

#endif


